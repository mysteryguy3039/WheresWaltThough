from random import randint
from time import sleep
from math import sqrt, log

board = []


def board_size(b_size):
    for x in range(b_size):
        board.append(["O"] * size)


def print_board(p_board):
    for row in p_board:
        print " ".join(row)


print "Let's play 'Where's Walt Though?'!"
size = raw_input("Enter the size of the mall (between 5 and 25): ")
while not size.isdigit() or int(size) < 5 or int(size) > 25:
    size = raw_input("Please enter a valid size for the mall (between 5 and 25): ")
size = int(size)
print "You have %d turns to find Walt." % ((size + (size / 2)) / 2)
board_size(size)
print_board(board)


def random_spot(spots):
    return randint(0, len(spots) - 1)


def find_ship_dis(g_row, g_col, s_row, s_col):
    return int(sqrt((g_row - (s_row)) ** 2 + (g_col - (s_col)) ** 2))


def find_heat(t_row, t_col, g_row, g_col):
    track_dis = find_ship_dis(t_row, t_col, ship_row, ship_col)
    ship_dis = find_ship_dis(g_row, g_col, ship_row, ship_col)
    if ship_dis < track_dis:
        if ship_dis < sqrt(size) - sqrt(size) / 2:
            print "-Warmer..."
            print "--Burning..."
        else:
            print "-Warmer..."
    elif ship_dis > track_dis:
        if ship_dis > sqrt(size * 4):
            print "-Colder..."
            print "--Freezing..."
        else:
            print "-Colder..."
    else:
        print "FeelsSameMan..."


def find_low_heat(sl_dis):
    if sl_dis < sqrt(size) - sqrt(size) / 2:
        print "-Warm..."
        print "--Burning..."
    elif sl_dis <= sqrt(size):
        print "-Warm..."
    elif sl_dis > size - sqrt(size):
        print "-Cold..."
        print "--Freezing..."
    else:
        print "-Cold..."


ship_row = random_spot(board) + 1
ship_col = random_spot(board) + 1

buff_dict = {}
count = 0
#buffs = int(round(size**2 * 0.14))
buffs = int(round(log(size) * size))

for buff in range(buffs):
    buff_t = True
    while buff_t:
        buff_row = random_spot(board)
        buff_col = random_spot(board)
        if buff_row == ship_row and buff_col == ship_col:
            continue
        else:
            for buffs in buff_dict:
                if buff_dict[buffs][0] == buff_row and buff_dict[buffs][1] == buff_col:
                    break
            else:
                buff_t = False
    else:
        buff_dict[buff] = [buff_row, buff_col]

print "There are %d VIPs!" % (len(buff_dict.keys()))

turn_max = (size + size / 2) / 2
turn = 1
while turn <= turn_max:
    print "turn: " + str(turn)
    turn += 1
    guess_row = raw_input("Guess row (1 - %d): " % size)
    guess_col = raw_input("Guess column (1 - %d): " % size)
    while (not guess_row.isdigit() or not guess_col.isdigit()) or (int(guess_row) > size or int(guess_col) > size) or \
            ((int(guess_row) <= 0 or int(guess_row) > size) or (int(guess_col) <= 0 or int(guess_col) > size)) or (
                board[int(guess_row) - 1][int(guess_col) - 1] == "X"):
        if not guess_row.isdigit() or int(guess_row) > size or int(guess_row) <= 0:
            if not guess_row.isdigit():
                print "Please enter a digit."
            else:
                print "That's not even in the mall!"
            sleep(1)
            guess_row = raw_input("Enter the row again (1 - %d): " % size)
        elif not guess_col.isdigit() or int(guess_col) > size or int(guess_col) <= 0:
            if not guess_col.isdigit():
                print "Please enter a digit."
            else:
                print "That's not even in the mall!"
            sleep(1)
            guess_col = raw_input("Enter the column again (1 - %d): " % size)
        else:
            print "You've already guessed that!"
            sleep(1)
            guess_row = raw_input("Enter the row again (1 - %d): " % size)
            guess_col = raw_input("Enter the column again (1 - %d): " % size)
    guess_row = int(guess_row)
    guess_col = int(guess_col)
    print "Looking...",
    sleep(2)

    if guess_row == ship_row and guess_col == ship_col:
        print "Congratulations! You found Walt!\n!!!!!!!!!!!!!!!!!!!!\
        !()()()()()()()()()()()()()!!!!!!!!!!!\
        !/\/\/\/\/\/\/\/\/\/\/\/\/\!!!!!!!\
        ![][][][][][][][][][][][][][]!!!!!!!!!@#@#@#@#@#@#@#@#@!\
        !!!!!!!!!!!%^%^%^%^%^%^%^%^%^!!!!!!!!!!!"
        board[ship_row - 1][ship_col - 1] = 'W'
        break
    else:
        for key in buff_dict:
            if guess_row == buff_dict[key][0] + 1 and guess_col == buff_dict[key][1] + 1:
                print "You found a VIP! You get %d extra turns!" % (sqrt(size) + 1)
                turn_max += sqrt(size) + 1
                break
        print "Walt is not there!"
        if count == 0:
            count += 1
            track_row = guess_row
            track_col = guess_col
            s_dis = find_ship_dis(guess_row, guess_col, ship_row, ship_col)
            find_low_heat(s_dis)
        else:
            find_heat(track_row, track_col, guess_row, guess_col)
            track_row = guess_row
            track_col = guess_col
        board[guess_row - 1][guess_col - 1] = "X"
    print_board(board)
    print
else:
    print "---Game Over---\nYou failed to find Walt yo!"
    print "Walt row at: %d" % ship_row
    print "Walt col at: %d" % ship_col
    board[ship_row - 1][ship_col - 1] = 'W'

print_board(board)
